importScripts("/libs/dexie.js","/libs/q.js","/config/conf.js");var Conf,systemDB,CACHE_NAME="xwebjs_cache",cachedCoreFiles=["/","/index.html","/boot.js","/libs/q.js","/libs/xwebjs.js","/config/conf.js"],enableCoreFileCache=!1,FIlE_TYPE={LIB:"LIB",MODULE:"MODULE"};function enableDB(){try{return(systemDB=new Dexie("xwebjs_system")).version(1).stores({moduleCodes:"moduleId,[contextId+modulePath]",libCodes:"libId,[contextId+libPath]",libMetaCodes:"libMetaId,[contextId+libPath]"}),systemDB.open()}catch(e){console.error("Failed to setup the system index DB because:"+e.oetMessage())}}function generateFileCode(e,o){var n,t,s,r,l,c,i;return i=o===FIlE_TYPE.MODULE?(r=/https?:\/\/[\w|.|\d|:]+\/xwebjs_module\/(.+)\/(.+)/,c=getContextModuleCodes,function(e){var o,t="_x.exportModule(";{if((e=e[0].content).substr(0,t.length)===t)return o=t+"'"+n+"',"+e.slice(t.length),new Response(o);throw new Error("Invalid module file content")}}):(r=/https?:\/\/[\w|.|\d|:]+\/xwebjs_lib\/(.+)\/(.+)/,c=getContextLibraryCodes,function(e){return e=e[0].content,new Response(e.replace(/_x\.exportModule\("/g,'_x.exportModule("'+t+"."+s+"."))}),l=r.exec(e.url),t=l[1],s=l[2],n="xwebjs."+t+"."+s.replace("/","."),c.call(this,t,s).then(i,function(){return console.warn("Logically, this case should not happen as supported module or library resource should have been cached in the indexDB for the first time loading"),e.url=s.replace(".","/"),fetch(e).then(function(e){return console.log("Response from network is:",e),e}).catch(function(e){throw console.error("Fetching failed:",e),e})})}function getContextModuleCodes(n,s){return Q.promise(function(e,o,t){systemDB.on("ready",function(){e(systemDB.moduleCodes.where("[contextId+modulePath]").equals([n,s]).toArray())})})}function getContextLibraryCodes(n,s){return Q.Promise(function(o,e,t){systemDB.open().then(function(e){o(e.libCodes.where("[contextId+libPath]").equals([n,s]).toArray())})})}Conf.cache&&"boolean"==typeof Conf.cache.core&&(enableCoreFileCache=Conf.cache.core),enableCoreFileCache||(cachedCoreFiles=[]),enableDB(),self.addEventListener("install",function(e){console.log("Service worker is installed"),console.log("Caching files"),self.skipWaiting(),e.waitUntil(caches.open(CACHE_NAME).then(function(e){console.log("Opened cache, and caching files"),e.addAll(cachedCoreFiles)}))}),self.addEventListener("activate",function(e){console.log("Service worker is activated"),self.clients.claim()}),self.addEventListener("fetch",function(o){"only-if-cached"===o.request.cache&&"same-origin"!==o.request.mode||o.respondWith(caches.match(o.request).then(function(e){return e||(-1!==o.request.url.indexOf("/xwebjs_module")?(console.log("Fetching module content from index DB:"+o.request.url),generateFileCode(o.request,FIlE_TYPE.MODULE)):-1!==o.request.url.indexOf("/xwebjs_lib")?(console.log("Fetching library content from index DB:"+o.request.url),generateFileCode(o.request,FIlE_TYPE.LIB)):fetch(o.request).then(function(e){return console.log("Response from network is:",e),e}).catch(function(e){throw console.error("Fetching failed:",e),e}))}))});