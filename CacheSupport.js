importScripts("/libs/dexie.js","/libs/q.js","/config/conf.js");var Conf,systemDB,CACHE_NAME="xwebjs_cache",cachedCoreFiles=["/","/index.html","/boot.js","/libs/q.js","/libs/xwebjs.js","/config/conf.js"],isDBEnabled=!1,enableCoreFileCache=!1;function enableDB(){var e=Q.defer();try{return(systemDB=new Dexie("xwebjs_system")).version(1).stores({moduleCodes:"moduleId,[contextId+modulePath]"}),systemDB.on("ready",function(){isDBEnabled=!0,e.resolve()}),systemDB.open(),e.promise}catch(e){console.error("Failed to setup the system index DB because:"+e.oetMessage())}}function generateModuleFileCode(e){var t,o,n=/https?:\/\/[\w|.|\d|:]+\/xwebjs_module\/(.+)\?(.+)&(.+)/.exec(e.url);return o=n[1],t=n[2],getContextModuleCodes(n[3],o).then(function(e){var o,n="_x.exportModule(";if((e=e[0].content).substr(0,n.length)===n)return o=n+"'"+t+"',"+e.slice(n.length),new Response(o);throw Error("Invalid module content")},function(){return console.warn("Logically, this case should not happen as module resource should have been cached in the indexDB for the first time loading"),e.url=o.replace(".","/"),fetch(e).then(function(e){return console.log("Response from network is:",e),e}).catch(function(e){throw console.error("Fetching failed:",e),e})})}function getContextModuleCodes(e,o){return systemDB.moduleCodes.where("[contextId+modulePath]").equals([e,o]).toArray()}Conf.cache||"boolean"!=typeof Conf.cache.core||(enableCorFileCache=Conf.cache.core),enableCoreFileCache&&(cachedCoreFiles=[]),self.addEventListener("install",function(e){console.log("Service worker is installed"),console.log("Caching files"),self.skipWaiting(),e.waitUntil(caches.open(CACHE_NAME).then(function(e){console.log("Opened cache, and caching files"),e.addAll(cachedCoreFiles)}))}),self.addEventListener("activate",function(e){console.log("Service worker is activated"),self.clients.claim()}),self.addEventListener("fetch",function(o){o.respondWith(caches.match(o.request).then(function(e){return e||(-1!==o.request.url.indexOf("/xwebjs_module")?(console.log("Fetching module content from index DB:"+o.request.url),isDBEnabled?generateModuleFileCode(o.request):enableDB().then(function(){return generateModuleFileCode(o.request)})):fetch(o.request).then(function(e){return console.log("Response from network is:",e),e}).catch(function(e){throw console.error("Fetching failed:",e),e}))}))});